p<-(1:99)/100
y1<-qnorm(p, mean=0)
y2<-qnorm(p, mean=0)
plot(y1, y2, type="l")
y2<-qnorm(p, mean=2)
plot(y1, y2, type="l")
y2<-qnorm(p, mean=10)
plot(y1, y2, type="l")
y2<-qnorm(p, mean=10)
?qbinom
y2<-qbinom(p, prob = 0.2)
y2<-qbinom(p, size = 100, prob = 0.2)
plot(y1, y2, type="l")
y2<-qnorm(p, mean=10)
plot(y1, y2, type="l")
abline(a=0, b=1)
y1<-qnorm(p, mean=0)
y2<-qnorm(p, mean=3)
plot(y1, y2, type="l")
abline(a=0, b=1)
abline(a=0, b=1, col=2)
y2<-qnorm(p, mean=3, sd=1)
plat(y2, type="l")
plot(y2, type="l")
y1<-dexp(p, rate=1/3)
plot(y1, y2, type="l")
y1<-qexp(p, rate=1/3)
plot(y1, y2, type="l")
y1<-qexp(p, rate=1/3)
y2<-qnorm(p, mean=3, sd=1)
plot(y1, y2, type="l")
plot(y2, y1, type="l")
abline(a=0, b=1, col=2)
pnorm(2.002)
1 - pnorm(2.002)
sd
var
c = 7.815
pchisq(c)
pchisq(c, df = 4)
pchisq(c, df = 3)
pchisq(c, df = 5)
pchisq(c, df = 3)
1 - pchisq(c, df = 3)
pchisq(c, df = 3)
lau = read.table(file="http://venus.unive.it/romanaz/edami/dati/laureati.txt",
+  header=FALSE)
lau = read.table(file="http://venus.unive.it/romanaz/edami/dati/laureati.txt",header=FALSE)
quantile(lau, 0.1)
quantile(0.1, lau)
quantile(0.1)
quantile(lau)
summary
?summary
summary.table
rating <- read.csv('http://venus.unive.it/romanaz/edami/dati/rating_final.csv')
restaurant <- read.csv('http://venus.unive.it/romanaz/edami/dati/geoplaces2.csv', na.strings='?')
customer <- read.csv('http://venus.unive.it/romanaz/edami/dati/userprofile.csv', na.strings='?')
view(restaurant)
n_res = tapply(rating[,3], rating[,1], length)
ave_res = tapply(rating[,3], rating[,1], mean)
ave_res
str(rating)
n_res = tapply(rating[,3], rating[,2], length)
ave_res = tapply(rating[,3], rating[,2], mean)
ave_res
n_res
summary(n_res)
summary(ave_res)
boxplot(ave_res)
perm = order(restaurant[,1])
#order non cambia la strut dati ma da una permutazione da 1 a num_res secondo l'ordine dei id
perm = order(restaurant[,1])
#ordiniamo la tabella dei ristoranti secondo il loro id
res1 = restaurant[perm,]
best = res1[ave_res == 2]
best = res1[ave_res == 2,]
best
uni <- read.csv2('http://venus.unive.it/romanaz/edami/dati/colleges.csv',
+  na.strings=' ', skip=1)
+  na.strings=' ', skip=1)
#
uni <- read.csv2('http://venus.unive.it/romanaz/edami/dati/colleges.csv',
+  na.strings=' ', skip=1)
uni <- read.csv2('http://venus.unive.it/romanaz/edami/dati/colleges.csv',
+na.strings=' ', skip=1)
uni <- read.csv2('http://venus.unive.it/romanaz/edami/dati/colleges.csv', na.strings=' ', skip=1)
names(uni) <- c('name', 'state', 'pub', 'satm', 'satv', 'act', 'recap', 'accap',
+  'enrol', 'p10', 'p25', 'ft', 'pt', 'intui', 'outtui', 'room', 'board', 'fee',
+  'book', 'inc', 'phd', 'sfratio', 'grate')
names(uni) <- c('name', 'state', 'pub', 'satm', 'satv', 'act', 'recap', 'accap',
'enrol', 'p10', 'p25', 'ft', 'pt', 'intui', 'outtui', 'room', 'board', 'fee',
'book', 'inc', 'phd', 'sfratio', 'grate')
uni <- read.csv2('http://venus.unive.it/romanaz/edami/dati/colleges.csv',
na.strings=' ', skip=1)
str(uni)
setwd("~/Desktop/universita/third/performance/progetto/tcpsimulator/Simtipee")
tcp <- "AIMD" # protocollo
values <- "AIMD_h10_ch100000_p0.7_t0.05" # valori da sostituire
name <- paste(tcp,values,sep="_")
path <- paste(name,"csv",sep=".")
performance <- paste(tcp,"performance",sep=" ")
THimage <- paste(name,"throughput.png",sep="_")
RSTimage <- paste(name,"RST.png",sep="_")
Hostimage <- paste(name,"HostT.png",sep="_")
# LETTURA DATI
da <- read.csv(path,header=T,sep=";")
da <- read.csv(path,header=T,sep=";")
setwd("~/Desktop/universita/third/performance/progetto/tcpsimulator/Simtipee")
da <- read.csv(path,header=T,sep=";")
values <- "AIMD_h10_ch100000_p0.7_t0.05.csv" # valori da sostituire
name <- paste(tcp,values,sep="_")
path <- paste(name,"csv",sep=".")
performance <- paste(tcp,"performance",sep=" ")
THimage <- paste(name,"throughput.png",sep="_")
RSTimage <- paste(name,"RST.png",sep="_")
Hostimage <- paste(name,"HostT.png",sep="_")
# LETTURA DATI
da <- read.csv(path,header=T,sep=";")
values <- "AIMD_h10_ch100000_p0.7_t0.05" # valori da sostituire
name <- paste(tcp,values,sep="_")
path <- paste(name,"csv",sep=".")
performance <- paste(tcp,"performance",sep=" ")
THimage <- paste(name,"throughput.png",sep="_")
RSTimage <- paste(name,"RST.png",sep="_")
Hostimage <- paste(name,"HostT.png",sep="_")
# LETTURA DATI
da <- read.csv(path,header=T,sep=";")
da <- read.csv(path,header=T,sep=";")
setwd("~/Desktop/universita/third/performance/progetto/tcpsimulator/Simtipee")
da <- read.csv(path,header=T,sep=";")
values <- "AIMD_h10_ch100000_p0.7_t0.05.csv" # valori da sostituire
da <- read.csv(values,header=T,sep=";")
str(da)
head(da)
#Throughput plot
png(filename=THimage)
muT <- mean(da$meanT)
plot(da$Time,da$meanT,type="l",col="blue",main=performance,xlab="Simulation time",ylab="Channel Throughput",ylim=c(muT-0.05,muT+0.05))
setwd("~/Desktop/universita/third/performance/progetto/tcpsimulator/Simtipee")
tcp <- "AIMD" # protocollo
tcp <- "AIMD" # protocollo
values <- "AIMD_h10_ch100000_p0.7_t0.05.csv" # valori da sostituire
name <- paste(tcp,values,sep="_")
path <- paste(name,"csv",sep=".")
performance <- paste(tcp,"performance",sep=" ")
THimage <- paste(name,"throughput.png",sep="_")
RSTimage <- paste(name,"RST.png",sep="_")
Hostimage <- paste(name,"HostT.png",sep="_")
# LETTURA DATI
da <- read.csv(values,header=T,sep=";")
str(da)
head(da)
#Throughput plot
png(filename=THimage)
muT <- mean(da$meanT)
plot(da$Time,da$meanT,type="l",col="blue",main=performance,xlab="Simulation time",ylab="Channel Throughput",ylim=c(muT-0.05,muT+0.05))
lines(da$Time,da$maxT,pch= 20,col="red")
lines(da$Time,da$minT,pch= 20,col="green")
dev.off()
# Response Time plot
png(filename=RSTimage)
muR <- mean(da$meanRST)
plot(da$Time,da$meanRST,col="blue",type="l",main=performance,xlab="Simulation Time",ylab="Response Time")
lines(da$Time,da$minRST,col="green")
lines(da$Time,da$maxRST,col="red")
dev.off()
png(filename=Hostimage)
muH <- mean(da$hostMean)
plot(da$Time,da$hostMean,type="l",col="blue",main=performance,xlab="Simulation time",ylab="Channel Throughput",ylim=c(muH-0.05,muH+0.05))
lines(da$Time,da$hostMax,pch= 20,col="red")
lines(da$Time,da$hostMin,pch= 20,col="green")
dev.off()
png(filename=THimage)
muT <- mean(da$meanT)
plot(da$Time,da$muT,type="l",col="blue",main=performance,xlab="Simulation time",ylab="Channel Throughput",ylim=c(muT-0.05,muT+0.05))
lines(da$Time,da$maxT,pch= 20,col="red")
lines(da$Time,da$minT,pch= 20,col="green")
dev.off()
png(filename=THimage)
muT <- mean(da$distMean)
plot(da$Time,da$meanT,type="l",col="blue",main=performance,xlab="Simulation time",ylab="Channel Throughput",ylim=c(muT-0.05,muT+0.05))
lines(da$Time,da$maxT,pch= 20,col="red")
lines(da$Time,da$minT,pch= 20,col="green")
dev.off()
png(filename=THimage)
muT <- mean(da$distMean)
plot(da$Time,da$distMean,type="l",col="blue",main=performance,xlab="Simulation time",ylab="Channel Throughput",ylim=c(muT-0.05,muT+0.05))
lines(da$Time,da$distMax,pch= 20,col="red")
lines(da$Time,da$distMin,pch= 20,col="green")
dev.off()
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
n
w <- 10
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
plot(da$Time[1:(n-w)],smooth,type="l",pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$hostMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
without <- da[da$Time > 10000,] # sostituire al posto di 10000 il tempo di warm up
hist(without$distMean)
lines(density(without$distMean),col= "red",type="l")
qqnorm(without$distMean)
qqline(without$distMean)
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
plot(da$Time[1:(n-w)],smooth,type="l",pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
plot(da$Time[1:(n-w)],smooth,type="l",pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
w <- 10
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
w <- 10
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
without <- da[da$Time > 10000,] # sostituire al posto di 10000 il tempo di warm up
hist(without$distMean)
lines(density(without$distMean),col= "red",type="l")
qqnorm(without$distMean)
qqline(without$distMean)
w <- 20
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
w <- 20
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png")
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
without <- da[da$Time > 10000,] # sostituire al posto di 10000 il tempo di warm up
hist(without$distMean)
lines(density(without$distMean),col= "red",type="l")
qqnorm(without$distMean)
qqline(without$distMean)
png()
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 12, height = 8)
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 12, height = 8, units = cm)
par(mfrow = c(1,2))
ms = mean(smooth)
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 12, height = 8, units = c(cm))
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 12, height = 8, cm)
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", units = cm,  width = 12, height = 8)
)
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", units = cm,  width = 12, height = 8)
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", units = "cm",  width = 12, height = 8)
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 1200, height = 800)
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 1200, height = 400)
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
w <- 20
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 1200, height = 400)
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
da <- read.csv("AIMD_h10_ch100000_p0.7_t0.05.csv",sep=";",header=T)
str(da)
n <- dim(da)[1]
w <- 20
x <- da$hostMean
smooth <- c()
for(i in 1:w){
smooth[i] <- sum(x[1:(2*i-1)])/(2*i-1)
}
for(i in (w+1):(n-w)){
smooth[i] <- sum(x[(i-w):(i+w)])/(2*w+1)
}
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 1200, height = 400)
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
png(filename="AIMD_h10_ch100000_p0.7_t0.05.png", width = 1200, height = 800)
par(mfrow = c(1,2))
ms = mean(smooth)
plot(da$Time[1:(n-w)],smooth,type="l",ylim=c(ms-ms*0.05,ms+ms*0.05),pch=20,col="blue",main="SMOOTH")
abline(v=1e+07, col="red",lty = 2)
abline(v=1.25e+07, col="red",lty = 2)
abline(v=1.5e+07, col="red",lty = 2)
plot(da$Time,da$distMean,type="l",pch=20,col="blue",main="ORIGINAL")
par(mfrow = c(1,1))
dev.off();
